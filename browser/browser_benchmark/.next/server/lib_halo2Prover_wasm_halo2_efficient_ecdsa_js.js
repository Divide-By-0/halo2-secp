"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "lib_halo2Prover_wasm_halo2_efficient_ecdsa_js";
exports.ids = ["lib_halo2Prover_wasm_halo2_efficient_ecdsa_js"];
exports.modules = {

/***/ "./lib/halo2Prover/wasm/halo2_efficient_ecdsa.js":
/*!*******************************************************!*\
  !*** ./lib/halo2Prover/wasm/halo2_efficient_ecdsa.js ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync),\n/* harmony export */   \"initThreadPool\": () => (/* binding */ initThreadPool),\n/* harmony export */   \"init_panic_hook\": () => (/* binding */ init_panic_hook),\n/* harmony export */   \"prove_scalar_mult\": () => (/* binding */ prove_scalar_mult),\n/* harmony export */   \"prove_scalar_mult_full\": () => (/* binding */ prove_scalar_mult_full),\n/* harmony export */   \"prove_simple_circuit\": () => (/* binding */ prove_simple_circuit),\n/* harmony export */   \"wbg_rayon_PoolBuilder\": () => (/* binding */ wbg_rayon_PoolBuilder),\n/* harmony export */   \"wbg_rayon_start_worker\": () => (/* binding */ wbg_rayon_start_worker)\n/* harmony export */ });\n/* harmony import */ var _snippets_wasm_bindgen_rayon_7afa899f36665473_src_workerHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js */ \"./lib/halo2Prover/wasm/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nlet wasm;\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nconst cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = new Uint8Array();\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++){\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        } catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nlet WASM_VECTOR_LEN = 0;\nconst cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = function(arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr1 = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr1 + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr1 = realloc(ptr1, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr1 + offset, ptr1 + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr1;\n}\nlet cachedInt32Memory0 = new Int32Array();\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/ function init_panic_hook() {\n    wasm.init_panic_hook();\n}\n/**\n* @param {any} params_ser\n* @returns {any}\n*/ function prove_simple_circuit(params_ser) {\n    const ret = wasm.prove_simple_circuit(addHeapObject(params_ser));\n    return takeObject(ret);\n}\n/**\n* @param {any} params_ser\n* @returns {any}\n*/ function prove_scalar_mult(params_ser) {\n    const ret = wasm.prove_scalar_mult(addHeapObject(params_ser));\n    return takeObject(ret);\n}\n/**\n* @param {any} params_ser\n* @returns {any}\n*/ function prove_scalar_mult_full(params_ser) {\n    const ret = wasm.prove_scalar_mult_full(addHeapObject(params_ser));\n    return takeObject(ret);\n}\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/ function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n/**\n* @param {number} receiver\n*/ function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n/**\n*/ class wbg_rayon_PoolBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */ numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */ receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.ptr);\n        return ret;\n    }\n    /**\n    */ build() {\n        wasm.wbg_rayon_poolbuilder_build(this.ptr);\n    }\n}\nasync function load(module1, imports) {\n    if (typeof Response === \"function\" && module1 instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module1, imports);\n            } catch (e) {\n                if (module1.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module1.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module1, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return {\n                instance,\n                module: module1\n            };\n        } else {\n            return instance;\n        }\n    }\n}\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally{\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbg_time_777d19cd98790a7e = function(arg0, arg1) {\n        console.time(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_timeEnd_57a272cc84009b6d = function(arg0, arg1) {\n        console.timeEnd(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof val === \"object\" && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_6894564c2c334c42 = function() {\n        return handleError(function(arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n        }, arguments);\n    };\n    imports.wbg.__wbg_getRandomValues_805f1c3d65988a5a = function() {\n        return handleError(function(arg0, arg1) {\n            getObject(arg0).getRandomValues(getObject(arg1));\n        }, arguments);\n    };\n    imports.wbg.__wbg_crypto_e1d53a1d73fb10b8 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_038c26bf42b093f8 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_ab37218d2f0b24a8 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_080f4b19d15bc1fe = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof getObject(arg0) === \"string\";\n        return ret;\n    };\n    imports.wbg.__wbg_require_78a3dcfbdba9cbce = function() {\n        return handleError(function() {\n            const ret = module.require;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof getObject(arg0) === \"function\";\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_6e7d3e1f92610cbb = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() {\n        return handleError(function(arg0, arg1) {\n            const ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() {\n        return handleError(function() {\n            const ret = self.self;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() {\n        return handleError(function() {\n            const ret = window.window;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() {\n        return handleError(function() {\n            const ret = globalThis.globalThis;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() {\n        return handleError(function() {\n            const ret = global.global;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_set_a68214f35c417fa9 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_call_168da88779e35f61 = function() {\n        return handleError(function(arg0, arg1, arg2) {\n            const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = (0,_snippets_wasm_bindgen_rayon_7afa899f36665473_src_workerHelpers_js__WEBPACK_IMPORTED_MODULE_0__.startWorkers)(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n    return imports;\n}\nfunction initMemory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({\n        initial: 18,\n        maximum: 65536,\n        shared: true\n    });\n}\nfunction finalizeInit(instance, module1) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module1;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n    wasm.__wbindgen_start();\n    return wasm;\n}\nfunction initSync(module1, maybe_memory) {\n    const imports = getImports();\n    initMemory(imports, maybe_memory);\n    if (!(module1 instanceof WebAssembly.Module)) {\n        module1 = new WebAssembly.Module(module1);\n    }\n    const instance = new WebAssembly.Instance(module1, imports);\n    return finalizeInit(instance, module1);\n}\nasync function init(input, maybe_memory) {\n    if (typeof input === \"undefined\") {\n        input = /* asset import */ new __webpack_require__.U(__webpack_require__(/*! halo2_efficient_ecdsa_bg.wasm */ \"./lib/halo2Prover/wasm/halo2_efficient_ecdsa_bg.wasm\"));\n    }\n    const imports = getImports();\n    if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) {\n        input = fetch(input);\n    }\n    initMemory(imports, maybe_memory);\n    const { instance , module: module1  } = await load(await input, imports);\n    return finalizeInit(instance, module1);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/halo2Prover/wasm/halo2_efficient_ecdsa.js\n");

/***/ }),

/***/ "./lib/halo2Prover/wasm/halo2_efficient_ecdsa_bg.wasm":
/*!************************************************************!*\
  !*** ./lib/halo2Prover/wasm/halo2_efficient_ecdsa_bg.wasm ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "static/media/halo2_efficient_ecdsa_bg.ab588d05.wasm";

/***/ })

};
;